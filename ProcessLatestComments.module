<?php

/**
 * Latest Comments Process
 *
 * Generates a listing of all site comments in chronological order, making it easy to find and approve or remove them.
 *
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class ProcessLatestComments extends Process {

	/**
	 * Return information about this module (required)
	 *
	 */
	public static function getModuleInfo() {
		return array(

			// Your module's title
			'title' => 'Latest Comments', 

			// A 1 sentence description of what your module does
			'summary' => 'Generates a listing of all site comments in chronological order, making it easy to find and approve or remove them.',
	
			// Module version number: use 1 for 0.0.1 or 100 for 1.0.0, and so on
			'version' => 1, 

			// Name of person who created this module (change to your name)
			'author' => 'Ryan Cramer', 

			// URL to more info: change to your full modules.processwire.com URL (if available), or something else if you prefer
			// 'href' => 'http://modules.processwire.com/', 

			// name of permission required of users to execute this Process (optional)
			'permission' => 'page-edit', 
			); 
	}

	/**
	 * The name that will be used for the page this module creates
	 *
	 * It should be unique and the same (or similar) to the module name, but all lowercase.
	 * It should not be the same as any other ProcessWire admin page name.
	 *
	 */
	const pageName = 'latest-comments';

	/**
	 * This is an optional initialization function called before any execute functions.
	 *
	 */
	public function init() {
		parent::init(); // required
	}

	/**
	 * This function is executed when a page with your Process assigned is accessed. 
 	 *
	 * This can be seen as your main or index function. You'll probably want to replace
	 * everything in this function. 
	 *
	 */
	public function ___execute() {

		// locate all the FieldtypeComments fields
		$fields = array();
		foreach($this->fields as $field) {
			if($field->type instanceof FieldtypeComments) $fields[] = $field;
		}

		$count = count($fields);

		if(!$count) return $this->error("There are no comments fields installed"); 

		if($count == 1) {
			$field = reset($fields);
			$this->session->redirect("./list/?id=$field->id"); 
			return;
		}

		$out = "<h2>Please select a comments field</h2><ul>";
		foreach($fields as $field) {
			$out .= "<li><a href='./list/?id=$field->id'>{$field->name}</a></li>";
		}
		$out .= "</ul>";

		return $out;
	}	

	public function ___executeList() {

		$id = (int) $this->input->get->id; 
		if(!$id) return $this->error("No comments field specified"); 
		$field = $this->fields->get($id); 
		if(!$field || !$field->type instanceof FieldtypeComments) return $this->error("Unrecognized field"); 
		$this->input->whitelist('id', $id);

		$limit = 25; 
		$_limit = $limit+1; 
		$start = ($this->input->pageNum-1) * $limit; 
		$sort = 'created';
		$selector = "start=$start, limit=$_limit, sort=$sort";

		$comments = FieldtypeComments::findComments($field, $selector); 
		return $this->renderComments($comments, $start, $limit, count($comments) > $limit); 
		
	}

	protected function renderComments(CommentArray $comments, $start, $limit, $hasMore) {

		$out = ''; 
		$statuses = array(
			Comment::statusApproved => 'Approved',
			Comment::statusPending => 'Pending',
			Comment::statusSpam => 'Spam',
			999 => 'Delete',
			);

		$process = count($this->input->post); 
		$savePages = array();

		foreach($comments as $comment) {

			if($process) {
				$status = $this->input->post("CommentStatus{$comment->id}"); 
				if($status !== null && $status != $comment->status) {
					$comment->status = $status; 
					$savePages[$comment->page->id] = $comment->page; 
				}
			}

			$type = '';
			foreach($statuses as $status => $label) {
				$checked = $comment->status == $status ? " checked='checked'" : '';
				$type .= "<label><input type='radio' name='CommentStatus{$comment->id}' value='$status'$checked /> $label</label> &nbsp; ";
			}

			$comment->page->of(true);
			$out .= "<table class='CommentItem'>" . 
				"<tr>" . 
				"<th colspan='2'><a href='{$this->config->urls->admin}page/edit/?id={$comment->page->id}'>{$comment->page->title}</a></th>" . 
				"<td rowspan='5' class='CommentText'>" . htmlentities($comment->text, ENT_QUOTES, "UTF-8") . "</td>" . 
				"</tr>" . 
				"<tr><th>Cite</th><td>" . htmlentities($comment->cite, ENT_QUOTES, "UTF-8") . "</td></tr>" . 
				"<tr><th>Date</th><td>" . date('Y/m/d H:i', $comment->created) . "</td></tr>" . 
				"<tr><th>Type</th><td class='CommentStatus'>$type</td></tr>" . 
				"</table>";
			$comment->page->of(false);
		}

		if(empty($out)) $this->message("No comments to display"); 

		$links = '';	
		$queryString = '?';
		foreach($this->input->whitelist as $key => $value) $queryString .= "$key=$value&";
		$queryString = rtrim($queryString, '&');
		
		if($start > 0) $links .= "<a href='./page" . ($this->input->pageNum-1) . $queryString . "'>Prev Page</a> / ";
		if($hasMore) $links .= "<a href='./page" . ($this->input->pageNum+1) . $queryString . "'>Next Page</a>";
		if($links) $out .= "<p class='CommentPagination'>" . rtrim($links, "/ ") . "</p>";

		$button = $this->modules->get('InputfieldSubmit');
		$button->attr('name', 'renderCommentsSubmit');
		$button->attr('value', 'Commit Changes'); 
		$button->attr('class', $button->attr('class') . ' head_button_clone'); 
		if($this->input->pageNum > 1) $queryString = "./page{$this->input->pageNum}$queryString";
		$out = 	"<form action='$queryString' method='post'>" . $out . $button->render() . "</form>";

		if($process && count($savePages)) {
			foreach($savePages as $p) {
				$p->trackChange($this->fields->get($this->input->whitelist('id'))->name); 
				$p->trackChange('comments'); 
				$p->comments->trackChange('yep');
				$p->save();
				$this->message("Updated comment(s) on page: {$p->title}"); 
			}
		}
		
		return $out; 
	}

	/**
	 * Called only when your module is installed
	 *
	 * This version creates a new page with this Process module assigned. 
	 *
	 */
	public function ___install() {

		// create the page our module will be assigned to
		$page = new Page();
		$page->template = 'admin';
		$page->name = self::pageName; 

		// installs to the admin "Setup" menu ... change as you see fit
		$page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');
		$page->process = $this; 

		// we will make the page title the same as our module title
		// but you can make it whatever you want
		$info = self::getModuleInfo();
		$page->title = $info['title'];

		// save the page
		$page->save();

		// tell the user we created this page
		$this->message("Created Page: {$page->path}"); 
	}

	/**
	 * Called only when your module is uninstalled
	 *
	 * This should return the site to the same state it was in before the module was installed. 
	 *
	 */
	public function ___uninstall() {

		// find the page we installed, locating it by the process field (which has the module ID)
		// it would probably be sufficient just to locate by name, but this is just to be extra sure.
		$moduleID = $this->modules->getModuleID($this); 
		$page = $this->pages->get("template=admin, process=$moduleID, name=" . self::pageName); 

		if($page->id) {
			// if we found the page, let the user know and delete it
			$this->message("Deleting Page: {$page->path}"); 
			$page->delete();
		}
	}
	
}

