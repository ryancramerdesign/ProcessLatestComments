<?php

/**
 * Comments Manager
 *
 * Manage all comments field data in chronological order. 
 *
 * ProcessWire 2.x 
 * Copyright (C) 2012 by Ryan Cramer 
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 * 
 * http://processwire.com
 *
 */

class ProcessLatestComments extends Process {

	/**
	 * Return information about this module (required)
	 *
	 */
	public static function getModuleInfo() {
		return array(
			'title' => 'Comments Manager', 
			'summary' => 'Manage all comments field data in chronological order. Provides a simpler interface for managing comments vs. the page-based comment editor.',
			'version' => 1, 
			'author' => 'Ryan Cramer', 
			'permission' => 'page-edit', 
			'requires' => 'FieldtypeComments',
			); 
	}

	/**
	 * The name that will be used for the page this module creates
	 *
	 *
	 */
	const pageName = 'comments-manager';

	/**
	 * Statuses and labels that a Comment can have
	 *
	 */
	protected $statuses = array();

	/**
	 * Number of comments to show per page
	 *
	 */
	protected $limit = 10;

	/**
	 * Initialize the comments manager and define the statuses
	 *
	 */
	public function init() {
		parent::init();
		$this->statuses = array(
			Comment::statusApproved => $this->_('approved'),
			Comment::statusPending => $this->_('pending'),
			Comment::statusSpam => $this->_('spam'),
			999 => $this->_('delete')
			); 
	}

	/**
	 * Ask the user to select which comments field they want to manage
 	 *
	 * Or, redirect to the comments field if there is only 1.
	 *
	 */
	public function ___execute() {

		// locate all the FieldtypeComments fields
		$fields = array();
		foreach($this->fields as $field) {
			if($field->type instanceof FieldtypeComments) $fields[] = $field;
		}

		$count = count($fields);

		if(!$count) return $this->error($this->_('There are no comments fields installed')); 

		if($count == 1) {
			$field = reset($fields);
			$this->session->redirect("./list/{$field->name}/all/"); 
			return;
		}

		$out = "<h2>" . $this->_('Please select a comments field') . "</h2><ul>";
		foreach($fields as $field) {
			$out .= "<li><a href='./list/{$field->name}/all/'>{$field->name}</a></li>";
		}
		$out .= "</ul>";

		return $out;
	}	

	/**
	 * Execute the comments list 
	 *
	 */
	public function ___executeList() {

		$name = $this->sanitizer->fieldName($this->input->urlSegment2); 
		if(!$name) return $this->error($this->_('No comments field specified in URL')); 
		$field = $this->fields->get($name); 
		if(!$field || !$field->type instanceof FieldtypeComments) return $this->error($this->_('Unrecognized field')); 
		$status = $this->input->urlSegment3; 
		if(empty($status) || ($status != 'all' && !in_array($status, $this->statuses))) return $this->error($this->_('Unrecognized status (urlSegment3)')); 
		$headline = $field->get('label|name');
		$this->breadcrumbs->add(new Breadcrumb('./', $field->name)); 

		$limit = $this->limit; 
		$_limit = $limit+1; 
		$start = ($this->input->pageNum-1) * $limit; 
		$sort = '-created';
		$selector = "start=$start, limit=$_limit, sort=$sort";

		if($status != 'all') {
			$selector .= ", status=" . array_search($status, $this->statuses); 
			$headline .= " - " . ucfirst($status); 
		}

		foreach(array('cite', 'email', 'ip') as $key) {
			$value = $this->input->get->$key; 
			if(is_null($value)) continue; 
			$this->input->whitelist($key, $this->sanitizer->text($value)); 
			$value = $this->sanitizer->selectorValue($value); 
			$selector .= ", $key=$value";
			$this->message(ucfirst($key) . ": " . htmlentities($value, ENT_QUOTES, "UTF-8") . " (<a href='./'>" . $this->_('remove filter') . "</a>)"); 
		}

		$comments = FieldtypeComments::findComments($field, $selector); 
		if($this->input->post->processComments) $this->processComments($comments, $field); 
		Wire::setFuel('processHeadline', $headline); 
		return $this->renderComments($comments, $start, $limit, count($comments) > $limit); 
		
	}

	/**
	 * Process changes to posted comments
	 *
	 */
	protected function processComments(CommentArray $comments, Field $field) {

		$savePages = array();
		$table = $field->getTable();
		$numDeleted = 0;
		$numChanged = 0;

		foreach($comments as $comment) {

			$id = (int) $comment->id;

			$text = $this->input->post("CommentText{$comment->id}"); 
			if(!is_null($text) && $text != $comment->text) {
				$comment->text = $text; // cleans it
				$text = $this->db->escape_string($comment->text); 
				$this->db->query("UPDATE `$table` SET data='$text' WHERE id=$id"); 
				$numChanged++;
			}

			$status = $this->input->post("CommentStatus{$comment->id}"); 
			if($status === null) continue; 
			$status = (int) $status; 
			if($status === (int) $comment->status) continue; 
			if(!array_key_exists($status, $this->statuses)) continue; 

			$comment->status = $status; 

			if($status === 999) {
				$this->db->query("DELETE FROM `$table` WHERE id=" . (int) $comment->id); 
				$numDeleted++;
			} else {
				$this->db->query("UPDATE `$table` SET status=$status WHERE id=" . (int) $comment->id);
				$numChanged++;
			}
		}

		if($numDeleted) $this->message(sprintf($this->_n('Deleted %d comment', 'Deleted %d comments', $numDeleted), $numDeleted)); 
		if($numChanged) $this->message(sprintf($this->_n('Updated %d comment', 'Updated %d comments', $numChanged), $numChanged)); 
		if($numDeleted || $numChanged) {
			$pageNum = $this->input->pageNum > 1 ? 'page' . $this->input->pageNum : '';
			$this->session->redirect('./' . $pageNum);
		}
	}

	/**
	 * Render the markup for a single comment
	 *
	 */
	protected function renderComment(Comment $comment) {

		$type = '';
		foreach($this->statuses as $status => $label) {
			$checked = $comment->status == $status ? " checked='checked'" : '';
			$type .= "<label><input type='radio' name='CommentStatus{$comment->id}' value='$status'$checked /> $label</label> &nbsp; ";
		}

		$cite = htmlentities($comment->cite, ENT_QUOTES, "UTF-8"); 
		$email = htmlentities($comment->email, ENT_QUOTES, "UTF-8"); 
		$ip = htmlentities($comment->ip, ENT_QUOTES, "UTF-8"); 
		$date = strftime('%c', $comment->created); 
		$text = htmlentities($comment->text, ENT_QUOTES, "UTF-8");
		$text = str_replace('\r', ' ', $text); 
		$text = preg_replace('/\r?(\n)/', '\r', $text); 
		$text = str_replace('\r\r', "<br />\n<br />\n", $text);
		$text = str_replace('\r', "<br />\n", $text);

		if($comment->page->editable()) $text = "<div class='CommentTextEditable' id='CommentText{$comment->id}'>$text <a class='CommentTextEdit' href='#'>" . $this->_('edit') . "</a></div>";
			
		$out = 	"<table class='CommentItem CommentItemStatus{$comment->status}'>" . 
			"<tr>" . 
			"<th colspan='2'><a href='{$comment->page->url}'>{$comment->page->title}</a></th>" . 
			"<td rowspan='7' class='CommentText'>$text</td>" . 
			"</tr>" . 
			"<tr><th>" . $this->_('Cite') . "</th><td><a href='./?cite=" . urlencode($cite) . "'>$cite</a></td></tr>" . 
			"<tr><th>" . $this->_('Mail') . "</th><td><a href='./?email=" . urlencode($email) . "'>$email</a></td></tr>" . 
			"<tr><th>" . $this->_('Date') . "</th><td>$date</td></tr>" . 
			"<tr><th>" . $this->_('Addr') . "</th><td class='CommentIP'><a href='./?ip=" . urlencode($ip) . "'>$ip</a></td></tr>" . 
			"<tr><th>" . $this->_('Type') . "</th><td class='CommentStatus'>$type</td></tr>" . 
			"</table>";

		$comment->page->of(false);

		return $out; 
	}

	/**
	 * Render the markup for a list of comments
	 *
	 */
	protected function renderComments(CommentArray $comments, $start, $limit, $hasMore) {

		$out = '';
		$cnt = 0;
		$status = $this->input->urlSegment3;
		$prefix = $this->config->pageNumUrlPrefix; 

		foreach($comments as $comment) {
			if($status && $status != 'all' && $this->statuses[$comment->status] != $status) continue; 
			$out .= $this->renderComment($comment); 
			$cnt++;
			if($cnt >= $this->limit) break;
		}

		$queryString = '';
		foreach($this->input->whitelist as $key => $value) $queryString .= "$key=$value&";
		$queryString = trim($queryString, '&');
		if($queryString) $queryString = "?$queryString";

		$class = $this->input->urlSegment3 == 'all' ? 'on' : '';	
		$filters = "<p class='CommentFilters'><a class='$class' href='../all/$queryString'>" . $this->_('All') . "</a> / ";
		foreach($this->statuses as $status => $label) {
			if($status == 999) continue; 
			$class = $this->input->urlSegment3 === $label ? 'on' : '';
			$filters .= "<a class='$class' href='../$label/$queryString'>" . ucfirst($label) . "</a> / ";
		}
		$filters = rtrim($filters, '/ ') . "</p>";

		$links = '';	
		if($cnt > 0) $links = ($start+1) . "&#8211;" . ($start + $cnt) . " / ";
		if($start > 0) $links .= "<a href='./$prefix" . ($this->input->pageNum-1) . $queryString . "'>" . $this->_('Prev Page') . "</a> / ";
		if($hasMore) $links .= "<a href='./$prefix" . ($this->input->pageNum+1) . $queryString . "'>" . $this->_('Next Page') . "</a>";
		$links = "<p class='CommentPagination'>" . rtrim($links, "/ ") . "</p>";
		$out = $filters . $links . $out . $links; 

		if($cnt) { 
			$button = $this->modules->get('InputfieldSubmit');
			$button->attr('name', 'processComments');
			$button->attr('class', $button->attr('class') . ' head_button_clone'); 
			$button = $button->render();
		} else $button = '';

		if($this->input->pageNum > 1) $queryString = "./$prefix{$this->input->pageNum}$queryString";
		$out = 	"<form action='$queryString' method='post'>" . $out . $button . "</form>";

		if(!count($comments)) $this->error($this->_('None to display')); 

		return $out; 
	}

	/**
	 * Called only when your module is installed
	 *
	 * This version creates a new page with this Process module assigned. 
	 *
	 */
	public function ___install() {

		// create the page our module will be assigned to
		$page = new Page();
		$page->template = 'admin';
		$page->name = self::pageName; 

		// installs to the admin "Setup" menu ... change as you see fit
		$page->parent = $this->pages->get($this->config->adminRootPageID)->child('name=setup');
		$page->process = $this; 

		// we will make the page title the same as our module title
		// but you can make it whatever you want
		$info = self::getModuleInfo();
		$page->title = $info['title'];

		// save the page
		$page->save();

		// tell the user we created this page
		$this->message("Created Page: {$page->path}"); 
	}

	/**
	 * Called only when your module is uninstalled
	 *
	 * This should return the site to the same state it was in before the module was installed. 
	 *
	 */
	public function ___uninstall() {

		// find the page we installed, locating it by the process field (which has the module ID)
		// it would probably be sufficient just to locate by name, but this is just to be extra sure.
		$moduleID = $this->modules->getModuleID($this); 
		$page = $this->pages->get("template=admin, process=$moduleID, name=" . self::pageName); 

		if($page->id) {
			// if we found the page, let the user know and delete it
			$this->message("Deleting Page: {$page->path}"); 
			$page->delete();
		}
	}
	
}

